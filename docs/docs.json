{"name":"countries","dependencies":[],"components":[],"stores":[],"modules":[{"description":null,"name":"Countries","functions":[{"type":"Array(Countries.Country)","description":"<p>Return all countries</p>\n","name":"all","source":"/* Return all countries */\nfun all : Array(Countries.Country) {\n  Array.map(\n    COUNTRIES, \n    (item : Tuple(String, String, String)) { Countries.Country(item[0], item[1], item[2]) })\n}","arguments":[]},{"type":"Maybe(Countries.Country)","description":"<p>Return country information from country code</p>\n","name":"fromCode","source":"/* Return country information from country code */\nfun fromCode (code : String) : Maybe(Countries.Country) {\n  let country =\n    Array.find(COUNTRIES, (item : Tuple(String, String, String)) : Bool { code == item[1] })\n\n  case country {\n    Maybe::Just(item) =>\n      Maybe::Just(Countries.Country(item[0], item[1], item[2]))\n\n    Maybe::Nothing =>\n      Maybe::Nothing\n  }\n}","arguments":[{"type":"String","name":"code"}]},{"type":"Array(Countries.State)","description":"<p>Returns states filtered by country code</p>\n","name":"states","source":"/* Returns states filtered by country code */\nfun states (code : String) : Array(Countries.State) {\n  STATES\n  |> Array.select((item : Tuple(String, String, String)) { code == item[0] })\n  |> Array.map((item : Tuple(String, String, String)) { Countries.State(item[1], item[2]) })\n}","arguments":[{"type":"String","name":"code"}]}]}],"providers":[],"records":[{"description":"<p>Representation of a country</p>\n","name":"Countries.Country","fields":[{"key":"flag","type":"String","mapping":null},{"key":"code","type":"String","mapping":null},{"key":"name","type":"String","mapping":null}]},{"description":"<p>Representation of a country's state</p>\n","name":"Countries.State","fields":[{"key":"code","type":"String","mapping":null},{"key":"name","type":"String","mapping":null}]}],"enums":[]}